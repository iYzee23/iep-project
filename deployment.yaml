version: "3"

services:

  adminer:
    image: adminer
    ports:
      - 8083:8080
    networks:
      - usersNet
      - ownerNet
      - customerNet
      - courierNet

  redisSystem:
    image: redis
    networks:
      - usersNet
      - ownerNet
      - courierNet
      - customerNet

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      - ownerNet
      - courierNet
      - customerNet

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - 8081:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    networks:
      - ownerNet
      - courierNet
      - customerNet

  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - 8082:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    networks:
      - ownerNet
      - courierNet
      - customerNet

  sparkapp:
    image: sparkapp
    environment:
      - DATABASE_URL=database
    ports:
      - 5004:5000
    build:
      context: .
      dockerfile: sparkapp.dockerfile
    networks:
      - ownerNet
      - courierNet
      - customerNet

  blockchain:
    image: trufflesuite/ganache-cli
    ports:
      - 8545:8545
    networks:
      - ownerNet
      - courierNet
      - customerNet

  usersDB:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    volumes:
      - usersData:/var/lib/mysql
    networks:
      - usersNet

  usersMigrations:
    image: usersmigrations
    environment:
      - DATABASE_URL=usersDB
      - REDIS_HOST=redisSystem
    depends_on:
      usersDB:
        condition: service_healthy
    networks:
      - usersNet
    build:
      context: .
      dockerfile: usersMigrations.dockerfile

  users:
    image: users
    environment:
      - DATABASE_URL=usersDB
      - REDIS_HOST=redisSystem
    depends_on:
      - usersMigrations
    ports:
      - 5000:5000
    networks:
      - usersNet
    build:
      context: .
      dockerfile: users.dockerfile

  shopDB:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10
    volumes:
      - shopData:/var/lib/mysql
    networks:
      - ownerNet
      - customerNet
      - courierNet

  shopMigrations:
    image: shopmigrations
    environment:
      - DATABASE_URL=shopDB
      - REDIS_HOST=redisSystem
    depends_on:
      shopDB:
        condition: service_healthy
    networks:
      - ownerNet
      - customerNet
      - courierNet
    build:
      context: .
      dockerfile: shopMigrations.dockerfile

  owner:
    image: owner
    environment:
      - DATABASE_URL=shopDB
      - REDIS_HOST=redisSystem
      - SPARK_MODE=True
      - SPARK_URL=sparkapp
      - BLOCKCHAIN_URL=blockchain
    depends_on:
      - shopMigrations
    ports:
      - 5001:5000
    networks:
      - ownerNet
    build:
      context: .
      dockerfile: owner.dockerfile

  customer:
    image: customer
    environment:
      - DATABASE_URL=shopDB
      - REDIS_HOST=redisSystem
      - BLOCKCHAIN_URL=blockchain
    depends_on:
      - shopMigrations
    ports:
      - 5002:5000
    networks:
      - customerNet
    build:
      context: .
      dockerfile: customer.dockerfile

  courier:
    image: courier
    environment:
      - DATABASE_URL=shopDB
      - REDIS_HOST=redisSystem
      - BLOCKCHAIN_URL=blockchain
    depends_on:
      - shopMigrations
    ports:
      - 5003:5000
    networks:
      - courierNet
    build:
      context: .
      dockerfile: courier.dockerfile

volumes:
  usersData:
  shopData:

networks:
  usersNet:
  ownerNet:
  customerNet:
  courierNet: